---
type: post
title: Everything you need to know about CORS & SOP
description: Cross Origin Resource Sharing & Same Origin Policy explained.
modified: 27-10-2018
tags: [cors, sop, basics, concept]
image:
  path: /images/featured/tcp-vs-udp.jpg
  feature: /featured/tcp-vs-udp.jpg
---

Things were really simple when webpages were static. Write some texts, add images, add links and serve it to your users.<br>
Then JavaScript came into existence and it made them dynamic. Now one webpage could even make request to some other webpage without user interaction.
Yeah that's fun but then some smart ass guy thought what if we use JavaScript on bad.com to steal data from good.com where user is logged in.
Well then some other smart ass proposed that we should setup a restriction on these cross domain requests on the browser level.
He said we will call it Same Origin Policy and it won't let JavaScript make request to a webpage which isn't hosted on the same domain.
Here's how it works

**moth.example.com**: Ayy bruh! Can I fetch `light.json` from `lamp.example.com` real quick?<br>
**Browser**:

![we don't do that here meme](https://i.redd.it/zw17doei2h211.jpg)

Now lets see which pages can be accessed by `https://example.com/moth.html`

|Resource|Result|Reason|
|--------|------|------|
|https://example.com/dir/moth.html|<span style="color: #2ecc71">Successs</span>|Same Host, Port, Protocol|
|https://bad.com/moth.html|<span style="color: #e74c3c">Failure</span>|Different Host|
|https://sub.example.com/dir/moth.html|<span style="color: #e74c3c">Failure</span>|Different Host|
|http://example.com/dir/moth.html|<span style="color: #e74c3c">Failure</span>|Different Protocol|
|https://example.com:80/dir/moth.html|<span style="color: #e74c3c">Failure</span>|Different Port|

Things were secure again but it raised a problem, a big one. This restriction was applied to stop bad guys for making cross domain requests but it was no longer possible to make requests from `goodBoy.example.com` to `goodGirl.example.com`.<br>
To make things good again, they introduced something called Cross Origin Resource Sharing. The idea was simple, let developers choose whom they want to share their resources with. If the developers wants share data between `goodBoy.example.com` and `goodGirl.example.com`, let him do so.<br>
For this purpose, he will need to setup a new header on `goodBoy.example.com` as follows:
`Access-Control-Allow-Origin: goodGirl.example.com`
Now `goodBoy.example.com` is ready to make requests to `goodGirl.example.com` but ``goodGirl.example.com` doesn't allow that so he will need to do the same thing on `goodGirl.example.com` as well.
